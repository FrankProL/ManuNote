hostnamectl
	查看主机信息


磁盘命令
$ cat /etc/fstab 
$ cat /etc/mtab 
$ cat /proc/mounts
$ fdisk -l
$ mount -l

ls -lth		按时间排列
ls -lSh		按大小排列，-lShr 升序

grep 	
	-c 输出匹配行数
	-v 输出不匹配的行
	-i 忽略大小写
	-v "^$" 去掉空白行
sed

awk

lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规						数据，还可以访问网络连接和硬件。

nl 查看文件并显示行数
tac 文件反转  末行-->首行
rev 列反转 	  每行：末字符-->首字符


1.查看某个目录的大小：du -hs /home/master/documents
  查看目录下所有目录的大小并按大小降序排列：sudo du -sm /etc/* | sort -nr | less
2.查看磁盘使用情况（文件系统的使用情况）：sudo df -h
  df --block-size=GB
-h是使输出结果更易于人类阅读；du -s只展示目录的使用总量（不分别展示各个子目录情况），-m是以MB为单位展示目录的大小（当然-k/-g就是KB/GB了）

du 		du -hs 		du -h   	du -h --max-depth=1
du的英文为:disk usage,含义是磁盘空间使用情况，功能是逐级进入指定目录的每一个子目录并显示该目录占用文件系统数据块的情况，如果没有指定目录，则对当前的目录进行统计。
du的命令各个选项含义如下：

a：显示全部目录和其次目录下的每个档案所占的磁盘空间
s：只显示各档案大小的总合 
b：大小用bytes来表示
x：跳过在不同文件系统上的目录不予统计
a：递归地显示指定目录中各文件及子孙目录中各文件占用的数据块数


df
于du不同的是，du是面向文件的命令，只计算被文件占用的空间。不计算文件系统metadata 占用的空间。df则是基于文件系统总体来计算，通过文件系统中未分配空间来确定系统中已经分配空间的大小。df命令可以获取硬盘占用了多少空间，还剩下多少空间，它也可以显示所有文件系统对i节点和磁盘块的使用情况。

df命令各个选择的含义如下：

a：显示全部的档案系统和各分割区的磁盘使用情形
i：显示i -nodes的使用量
k：大小用k来表示 (默认值)
t：显示某一个档案系统的所有分割区磁盘使用量
x：显示不是某一个档案系统的所有分割区磁盘使用量
T：显示每个分割区所属的档案系统名称 


find:文件检索
	find  path  选项
	-》name
		find  /etc  -name init
		find  /etc  -name init*
		find  /etc  -name init???
		find  /etc  -iname init   自己测
	-》大小
		块：0.5k
		+:大于
		-：小于
		-a:and
		-o:或者
		find /etc  -size  +1000 -a -size -204800
	-》用户、用户组
		find /etc -user  root
		find /etc -group root
	-》文件类型
		find  /etc  -name init* -a -type f  文件
		find  /etc  -name init* -a -type d  目录
	-》根据时间来
		-》最后修改时间
		-》访问时间
		find命令下的三个时间参数atime,ctime,mtime
			atime:access time,最近一次访问时间，当使用这个文件的时候就会更新这个时间。
			mtime:modify time,最近一次文件内容更改时间，当修改文件内容数据时，就会更改这个时间。
			ctime:change time,最近一次文件属性或权限更改的时间，当修改文件的属性或权限的时候，就会更改这个时间。

常用符号命令
	-》管道符"|"
		cat /etc/passwd | more
		=>grep命令
		cat /etc/passwd  | grep root
		grep 'root' /etc/passwd
		
		cat /etc/passwd | head -3
	-》">" 覆盖符号
		echo "hadoop" >passwd 
	-》">>"追加符号
		echo "hive" >>passwd 

更改所有者和所有组
	-》chown
		用法：chown  username:groupname  /path
	-》chgrp:只能更改组

-》wc:统计文件的行数、字符数、单词数
					-l:wc  -l linux/beifeng01 
					-c:wc  -c linux/beifeng01 
					-w:wc  -w linux/beifeng01  
				-》du:统计文件夹及文件大小
					du /opt/datas
					-s：显示总和
					-h:人性化的显示
---------------
  ● 使用df命令来查看磁盘的属性，包括文件系统的类型、磁盘大小、已使用大小、剩余大小、使用百分比等。 df -h
  ● 使用du命令来查看文件夹和文件的大小。

 ->用户分类
	所有者：u
	同组：g
	其他人：o(other)
	所有人：a
	
->更改权限：
	-》字符修改
		chmod a+x /file
	-》数字修改
		chmod  777 /file
		chmod  -R 777 /file

常用系统管理命令
	-》网络管理
		-》ifconfig
		-》route -n
	-》进程管理命令
		-》top 
		-》ps -ef：查看当前所有进程
		-》jps:查看Java进程
		-》kill  -9   pid
			killall -9  java
	-》服务管理
		-》service  ：用于服务的管理
		-》chkconfig：用于设置服务的开机启动
			查看：chkconfig  --list
			关闭：chkconfig   service_name  off
			开启：chkconfig   service_name  on
	-》端口命令netstat
		netstat -atunlp
		a:所有的连接
		t:tcp协议
		n:用端口号来显示
		u:udp协议
		l：listen监听
		p：列举pid

tar:打包命令
	c  : 打包
	x  : 解包
	t  ：查看包
	v  ：显示
	f  ：使用档
	z  : 使用gzip压缩格式
	j  : 使用bzip2压缩格式
	-C : 解压到一个指定的目录


shell脚本
	-》变量
		-》环境变量 
			/etc/profile：系统全局的环境变量  （系统环境变量大写）
			~/.bash_profile:用户自定义环境变量
			PATH：整个系统的环境变量
		-》位置变量：$1-$9代表第一到第九个参数的值	------./  bash	sh 都可以执行脚本
		-》预定义变量
			$0：脚本的名称
			$!：进程的PID号
			$?：程序执行的状态，0成功，非0不成功
			$*：所有参数，整体
			$$：当前进程的id号
			$#：参数的总个数
			$@：所有参数，分割
		-》自定义
	-》常用表达式：
		-》逻辑表达式：&&  ||  ;	---;无逻辑联系
		-》运算表达式：
			-》$((a+b))  $(($a+$b))
			-》$[ a + b ]   $[ $a + $b ]
			-》expr $a + $b
		-》内置测试判断
			-》字符串的比较
				= 、 != 、 \>、 \< 、 
				-z：如果是null为真
				-n：如果不是null为真
			-》数值的比较
				在[]中 eq、ne、lt、le、gt、ge
				在(())中 >、 ==、 <、 !=、 >=、<=
			-》文件的判断
				-e 、是否存在
				-f 、是否是个文件
				-d 、是否是个目录
				-r 、是否可读
				-w 、是否可写
				-x 、是否可执行
	-》循环
		第一种：for
		第二种：while
			执行符：``
	-》判断
		第一种：if
		第二种：case
		
七、Linux定时任务
	-》date
		date -d '1 days ago' "+%Y%m%d" 
		date -d '-1 day' "+%Y%m%d"
		设置时间：
		date -s  '2016-10-22 17:58:00'
	-》at：设计定时任务
		[root@hadoop-senior01 datas]# at 18:00
		at> cp /etc/passwd /opt
		at> <EOT>
		job 1 at 2016-10-22 18:00
		
	-》crontab：任务调度
		service crond status
		编辑任务：crontab -e
		crontab 的格式
		* * * * *  command
		分钟（0-59）   
		小时（0-24）   
		日期（1-31）   
		月份（1-12）   
		星期（0-6）   command
		每周日凌晨12:00将passwd文件拷贝到/datas/beifeng-1中
		0  0  *  *  0  cp  /etc/passwd  /datas/beifeng-1
		
		查看当前用户有哪些任务：crontab -l
		删除当前用户的定时任务：crontab  -r  全部删除
		
		每天6:00-12:00    "-" ：时间间隔
		0  6-12  *  *  *  cp  /etc/passwd  /datas/beifeng-1
		每天6,8,12执行    "," :多个不连续的时间
		0  6,8,12  *  *  *  cp  /etc/passwd  /datas/beifeng-1
		每分钟执行一次　　＂／＂:运行的频率
		*/1  *  *  *  *　cp  /etc/passwd  /datas/beifeng-1
		每个月1号00:00执行
		0  0  1  *  *　cp  /etc/passwd  /datas/beifeng-1
		
		指定特定的文件作为该用户的crontab定时任务
		crontab -f file_path  -u username 
		crontab -u  指定用户
		
		
		0  0  1  *  *　bash  s.sh


Linux 按时间批量删除文件（删除N天前文件）
需要根据时间删除这个目录下的文件，/home/lifeccp/dicom/studies，清理掉20天之前的无效数据。

可以使用下面一条命令去完成：

find /home/lifeccp/dicom/studies -mtime +21 -name "*.*" -exec rm -Rf {} \;

/home/lifeccp/dicom/studies ：准备要进行清理的任意目录
-mtime：标准语句写法
＋10：查找10天前的文件，这里用数字代表天数，＋30表示查找30天前的文件
"*.*"：希望查找的数据类型，"*.jpg"表示查找扩展名为jpg的所有文件，"*"表示查找所有文件
-exec：固定写法
rm -rf：强制删除文件，包括目录
 {} \; ：固定写法，一对大括号+空格+/+;


统计当前文件夹下文件的个数，包括子文件夹里的
	ls -lR|grep "^-"|wc -l
统计文件夹下目录的个数，包括子文件夹里的
	ls -lR|grep "^d"|wc -l
统计当前文件夹下文件的个数
	ls -l |grep "^-"|wc -l
统计当前文件夹下目录的个数
	ls -l |grep "^d"|wc -l
附：
统计输出信息的行数
	wc -l
将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^d
	grep "^-"



网络命令
		ping 	测试网络连通情况
			ping www.baidu.com

			# windows
			# ping IP地址或主机名 [-t] [-a] [-n count] [-l size]
			# 参数含义：-t不停地向目标主机发送数据；
			# -a 以IP地址格式来显示目标主机的网络地址 ；
			# -n count 指定要Ping多少次，具体次数由count来指定 ；
			# -l size 指定发送到目标主机的数据包的大小。

		telnet	
			通过创建虚拟终端提供连接到远程主机终端仿真的TCP/IP协议。这一协议需要通过用户名和口令进行认证，是Internet远程登陆服务的标准协议。
			应用Telnet协议能够把本地用户所使用的计算机变成远程主机系统的一个终端。

			telnet可以检查某个端口是否开放：telnet IP:Port
			
		ssh
			建立在应用层和传输层基础上的安全协议，可以用来替代Telnet、FTP以及R命令，主要是用于解决口令在网上明文传输的问题。用 Telnet 和 FTP 登录服务器时，密码以明文的形式发送给服务器，怀有恶意的人可以通过监听网络上传输的数据包，得到用户的登录信息。通过使用SSH，用户可以把所有传输的数据进行加密，而且还能够防止DNS和 IP欺骗，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。

		netstat
			Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。

			https://blog.csdn.net/lanonola/article/details/51374011

			netstat用与检查某个端口是否开放如下：netstat -lnp | grep 端口号
				netstat -anp|grep 80
				netstat -lnp|grep 80

			NOTES
       		This program is obsolete.  Replacement for netstat is ss.  Replacement for netstat -r is ip route.  Replacement for netstat -i is ip -s link.  Replacement for netstat -g is ip maddr.

       	lsof -i:80
       		???


CentOS 7 yum安装路径查询方法
	先执行下面的命令，查看所有的已安装软件名称。
	rpm -qa 
	然后执行
	rpm -ql 软件名称
	就可以显示软件的安装路径。


查看系统是否有僵尸进程   0 zombie
	$ top 
定位僵尸进程
ps -A -o stat,ppid,pid,cmd |grep -e '^[Zz]'
	-A  参数列出所有进程
	-o  自定义输出字段 stat（状态）、ppid（进程父id）、pid（进程id）、cmd（命令）
	因为状态为z或者Z的进程为僵尸进程，所以我们使用grep抓取stat状态为zZ进程
使用Kill -HUP 僵尸进程ID来杀死僵尸进程，往往此种情况无法杀死僵尸进程，此时就需要杀死僵尸进程的父进程
	kill -HUP 僵尸进程父ID
$ top
top - 10:06:45 up 609 days, 19:41,  1 user,  load average: 0.31, 0.35, 0.36
Tasks: 355 total,   1 running, 354 sleeping,   0 stopped,   0 zombie
Cpu(s):  1.7%us,  0.3%sy,  0.0%ni, 98.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Mem:  65971584k total, 43434828k used, 22536756k free,   812560k buffers
Swap:  8388604k total,        0k used,  8388604k free, 25425588k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                                                        
11734 kudu      20   0 5218m 2.5g  24m S 24.5  3.9   1743:39 kudu-tserver                                                                                                                                                                   
25715 sdc       20   0 11.3g 2.2g 231m S  5.3  3.4 413:37.61 java                                                                                                                                                                           
 4639 root      20   0 2513m 157m 2588 S  3.3  0.2  23486:10 cmf-agent                                                                                                                                                                      
 9031 yarn      20   0 2393m 426m  24m S  0.7  0.7  45:49.32 java                                                                                                                                                                           
17152 none_pas  20   0 15308 1464  944 R  0.7  0.0   0:00.03 top                                                                                                                                                                            
   67 root      20   0     0    0    0 S  0.3  0.0 921:30.89 events/0     